# Install GlusterFS

- name: Create Gluster Directory
  file:
    path: "{{ gluster_dir }}"
    state: directory
    owner: root
    group: root
    mode: 0644
  when: inventory_hostname in groups['master-servers']

- name: Install Repo
  yum:
    name: "centos-release-gluster{{ gluster_ver | replace('.','') }}"
    state: present
  when: ansible_distribution == 'CentOS'

- name: "Manually install repo on Red Hat"
  yum_repository:
    baseurl: "http://mirror.centos.org/centos/7/storage/x86_64/gluster-{{ gluster_ver }}/"
    description: "Gluster repository"
    gpgcheck: no
    name: "CentOS-Gluster{{ gluster_ver }}"
  when: ansible_distribution == 'RedHat'

- name: Install GlusterFS
  yum:
    name: "{{ item }}"
    state: present
  with_items:
    - glusterfs-client
    - heketi-client

- name: Load Kernel Module
  command: modprobe dm_thin_pool

- name: Install Templates
  template:
    src: templates/{{ item }}.j2
    dest: "{{ gluster_dir }}/{{ item }}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - topology.json
    - heketi.json
    - storage-class.yml
    - heketi-deployment.json
    - heketi-bootstrap.json
  when: inventory_hostname in groups['master-servers']

- name: Copy Files
  copy:
    src: "{{ item }}"
    dest: "{{ gluster_dir }}/{{ item }}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - glusterfs-daemonset.json
    - heketi-service-account.json
  when: inventory_hostname in groups['master-servers']

- name: Label Nodes
  command: "kubectl label node {{ item }} storagenode=glusterfs"
  when: inventory_hostname in groups['master-servers']
  ignore_errors: yes
  register: debug_output
  with_items:
    - "{{ groups['all'] }}"

- name: Debug Output
  debug:
    msg:
      - "Command is: {{ debug_output.cmd }}"
      - "Stdout is: {{ debug_output.stdout }}"
  when: debug_enabled is defined and debug_enabled and debug_output.stdout is defined

- name: Deploy GlusterFS Daemonset
  shell: |
    kubectl create -f {{ gluster_dir }}/glusterfs-daemonset.json
    GLUSTER_WANTED=$(kubectl get -f {{ gluster_dir }}/glusterfs-daemonset.json | tail -n +2 | awk '{ print $2}')
    while [ $(kubectl get -f {{ gluster_dir }}/glusterfs-daemonset.json | tail -n +2 | awk '{ print $4}') != $GLUSTER_WANTED ]; do
      echo -n .;
      sleep 1;
    done;
  register: debug_output
  when: inventory_hostname in groups['master-servers']

- name: Wait for sysctl bug to show itself
  pause:
    seconds: 10

- name: 'Pass bridged IPv4 traffic to iptables'
  sysctl:
    name: net.bridge.bridge-nf-call-iptables
    sysctl_set: yes
    reload: yes
    value: 1
    state: present

- name: Debug Output
  debug:
    msg:
      - "Command is: {{ debug_output.cmd }}"
      - "Stdout is: {{ debug_output.stdout }}"
  when: debug_enabled is defined and debug_enabled and debug_output.stdout is defined

- name: Create Service Account
  shell: |
    kubectl create -f {{ gluster_dir }}/heketi-service-account.json
    while [ $(kubectl get -f {{ gluster_dir }}/heketi-service-account.json | wc -l) == '0' ]; do
      echo -n .;
      sleep 1;
    done;
  register: debug_output
  when: inventory_hostname in groups['master-servers']

- name: Debug Output
  debug:
    msg:
      - "Command is: {{ debug_output.cmd }}"
      - "Stdout is: {{ debug_output.stdout }}"
  when: debug_enabled is defined and debug_enabled and debug_output.stdout is defined

- name: Create Cluster Role Binding
  shell: |
    kubectl create clusterrolebinding heketi-gluster-admin --clusterrole=edit --serviceaccount=default:heketi-service-account
    while [ $(kubectl get clusterrolebinding heketi-gluster-admin | wc -l) == '0' ]; do
      echo -n .;
      sleep 1;
    done;
  register: debug_output
  when: inventory_hostname in groups['master-servers']

- name: Debug Output
  debug:
    msg:
      - "Command is: {{ debug_output.cmd }}"
      - "Stdout is: {{ debug_output.stdout }}"
  when: debug_enabled is defined and debug_enabled and debug_output.stdout is defined

- name: Create Secret
  shell: |
    kubectl create secret generic heketi-config-secret --from-file={{ gluster_dir }}/heketi.json
    while [ $(kubectl get secret heketi-config-secret | wc -l) == '0' ]; do
      echo -n .;
      sleep 1;
    done;
  register: debug_output
  when: inventory_hostname in groups['master-servers']

- name: Debug Output
  debug:
    msg:
      - "Command is: {{ debug_output.cmd }}"
      - "Stdout is: {{ debug_output.stdout }}"
  when: debug_enabled is defined and debug_enabled and debug_output.stdout is defined

- name: Deploy Bootstrap
  shell: |
    kubectl create -f {{ gluster_dir }}/heketi-bootstrap.json
    while [ $(kubectl get deployment deploy-heketi | grep deploy-heketi | awk '{ print $5 }') == '0' ]; do
      echo -n .;
      sleep 1;
    done;
  register: debug_output
  when: inventory_hostname in groups['master-servers']

- name: Debug Output
  debug:
    msg:
      - "Command is: {{ debug_output.cmd }}"
      - "Stdout is: {{ debug_output.stdout }}"
  when: debug_enabled is defined and debug_enabled and debug_output.stdout is defined

- name: Get Heketi Pod Name
  shell: "kubectl get pods | grep -i running | grep deploy-heketi | awk '{ print $1}'"
  register: heketi_pod_name
  when: inventory_hostname in groups['master-servers']

- name: Debug Output
  debug:
    msg:
      - "Command is: {{ heketi_pod_name.cmd }}"
      - "Stdout is: {{ heketi_pod_name.stdout }}"
  when: debug_enabled is defined and debug_enabled and debug_output.stdout is defined

- name: Copy Heketi Topology File to Container
  command: "kubectl cp {{ gluster_dir }}/topology.json {{ heketi_pod_name.stdout }}:/topology.json"
  register: debug_output
  when: inventory_hostname in groups['master-servers']

- name: Debug Output
  debug:
    msg:
      - "Command is: {{ debug_output.cmd }}"
      - "Stdout is: {{ debug_output.stdout }}"
  when: debug_enabled is defined and debug_enabled and debug_output.stdout is defined

- name: ABOUT TO DESTROY DATA ON ALL DEVICES PROVIDED FOR STORAGE IN INVENTORY FILE
  pause:
    seconds: 10

# TODO - this needs a guard - what if someone forgets to define the data disk
# or they put in the wrong thing
- name: WIPEING DATA
  shell: "dmsetup remove_all; wipefs -af {{ item }}"
  register: debug_output
  with_items:
    - "{{ data_disk_devices }}"

- name: Debug Output
  debug:
    msg:
      - "Command is: {{ debug_output.cmd }}"
      - "Stdout is: {{ debug_output.stdout }}"
  when: debug_enabled is defined and debug_enabled and debug_output.stdout is defined

- name: Deploy Topology
  command: "kubectl exec {{ heketi_pod_name.stdout }} -- heketi-cli topology load --json /topology.json"
  register: debug_output
  when: inventory_hostname in groups['master-servers']

- name: Debug Output
  debug:
    msg:
      - "Command is: {{ debug_output.cmd }}"
      - "Stdout is: {{ debug_output.stdout }}"
  when: debug_enabled is defined and debug_enabled and debug_output.stdout is defined

- name: Setup Storage
  command: "kubectl exec {{ heketi_pod_name.stdout }} heketi-cli setup-openshift-heketi-storage"
  register: debug_output
  when: inventory_hostname in groups['master-servers']

- name: Debug Output
  debug:
    msg:
      - "Command is: {{ debug_output.cmd }}"
      - "Stdout is: {{ debug_output.stdout }}"
  when: debug_enabled is defined and debug_enabled and debug_output.stdout is defined

- name: Copy Heketi Storage File
  command: "kubectl cp {{ heketi_pod_name.stdout }}:/heketi-storage.json {{ gluster_dir }}/heketi-storage.json"
  register: debug_output
  when: inventory_hostname in groups['master-servers']

- name: Debug Output
  debug:
    msg:
      - "Command is: {{ debug_output.cmd }}"
      - "Stdout is: {{ debug_output.stdout }}"
  when: debug_enabled is defined and debug_enabled and debug_output.stdout is defined

- name: Create Heketi Storage
  shell: |
    kubectl create -f {{ gluster_dir }}/heketi-storage.json
    while [ $(kubectl get job heketi-storage-copy-job | grep heketi | awk '{print $3}') == '0' ]; do
      echo -n .;
      sleep 1;
    done;
  register: dubeg_output
  when: inventory_hostname in groups['master-servers']

- name: Debug Output
  debug:
    msg:
      - "Command is: {{ debug_output.cmd }}"
      - "Stdout is: {{ debug_output.stdout }}"
  when: debug_enabled is defined and debug_enabled and debug_output.stdout is defined

- name: Cleanup Heketi Bootstrap
  command: "kubectl delete all,service,jobs,deployment,secret --selector deploy-heketi"
  register: debug_output
  when: inventory_hostname in groups['master-servers']

- name: Debug Output
  debug:
    msg:
      - "Command is: {{ debug_output.cmd }}"
      - "Stdout is: {{ debug_output.stdout }}"
  when: debug_enabled is defined and debug_enabled and debug_output.stdout is defined

- name: Deploy Heketi
  command: 'kubectl create -f {{ gluster_dir }}/heketi-deployment.json'
  register: debug_output
  when: inventory_hostname in groups['master-servers']

- name: Debug Output
  debug:
    msg:
      - "Command is: {{ debug_output.cmd }}"
      - "Stdout is: {{ debug_output.stdout }}"
  when: debug_enabled is defined and debug_enabled and debug_output.stdout is defined

- name: Get Cluster IP
  shell: |
    HEKETI_IP='';
    while [ -z $HEKETI_IP ]; do
      HEKETI_IP=$(kubectl get svc | grep -E '^heketi\s+' | awk '{ print $3}');
      sleep 1;
    done;
    echo -n $(kubectl get svc | grep -E '^heketi\s+' | awk '{ print $3}')
  when: inventory_hostname in groups['master-servers']
  register: heketi_ip

- name: Debug Output
  debug:
    msg:
      - "Command is: {{ heketi_ip.cmd }}"
      - "Stdout is: {{ heketi_ip.stdout }}"
  when: debug_enabled is defined and debug_enabled and debug_output.stdout is defined

- name: Set Cluster IP in Storage Class
  command: "sed -i 's/heketi_cluster_ip/{{ heketi_ip.stdout }}/g' {{ gluster_dir }}/storage-class.yml"
  register: debug_output
  when: inventory_hostname in groups['master-servers']

- name: Debug Output
  debug:
    msg:
      - "Command is: {{ debug_output.cmd }}"
      - "Stdout is: {{ debug_output.stdout }}"
  when: debug_enabled is defined and debug_enabled and debug_output.stdout is defined

- name: Deploy Storage Class
  command: "kubectl create -f {{ gluster_dir }}/storage-class.yml"
  register: debug_output
  when: inventory_hostname in groups['master-servers']

- name: Debug Output
  debug:
    msg:
      - "Command is: {{ debug_output.cmd }}"
      - "Stdout is: {{ debug_output.stdout }}"
  when: debug_enabled is defined and debug_enabled and debug_output.stdout is defined
